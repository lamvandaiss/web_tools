const <%= _.capitalize(_.camelCase(tableName)) %> = require('../models/<%= _.camelCase(tableName) %>');
const Model = <%= _.capitalize(_.camelCase(tableName)) %>;

// Define searchable fields (optional: limit to specific fields to improve performance)
const searchableFields = [/* Add string fields to search here if desired */];

// Helper function to get searchable fields from schema (fallback if not explicitly defined)
const getSearchFields = (schema) => {
    return searchableFields.length > 0
        ? searchableFields
        : Object.entries(schema.paths)
            .filter(([_, schemaType]) => schemaType.instance === 'String')
            .map(([path]) => path);
};

// GET: Retrieve all items with pagination, search, and sorting
exports.getAll<%= _.capitalize(_.camelCase(tableName)) %>s = async (req, res) => {
    try {
        const { page = 1, limit = 10, search = '', sortBy = 'createdAt', sortOrder = 'desc' } = req.query;
        const skip = (parseInt(page) - 1) * parseInt(limit);
        const fields = getSearchFields(Model.schema);

        // Build search query with case-insensitive regex
        const query = search && fields.length
            ? { $or: fields.map(field => ({ [field]: { $regex: search, $options: 'i' } })) }
            : {};

        // Build sort option object
        const sortOptions = { [sortBy]: sortOrder === 'asc' ? 1 : -1 };

        // Fetch paginated data and total count in parallel
        const [data, totalItems] = await Promise.all([
            Model.find(query).sort(sortOptions).skip(skip).limit(parseInt(limit)),
            Model.countDocuments(query),
        ]);

        res.status(200).json({
            data,
            currentPage: parseInt(page),
            totalPages: Math.ceil(totalItems / parseInt(limit)),
            totalItems,
        });
    } catch (error) {
        console.error("Error in getAll:", error);
        res.status(500).json({ message: "Failed to retrieve data.", error: error.message });
    }
};

// GET: Retrieve a single item by ID
exports.get<%= _.capitalize(_.camelCase(tableName)) %>ById = async (req, res) => {
    try {
        const data = await Model.findById(req.params.id);
        if (!data) {
            return res.status(404).json({ message: '<%= _.capitalize(_.camelCase(tableName)) %> not found' });
        }
        res.status(200).json(data);
    } catch (error) {
        console.error("Error in getById:", error);
        if (error.name === 'CastError') {
            return res.status(400).json({ message: 'Invalid ID format.' });
        }
        res.status(500).json({ message: "Failed to retrieve data.", error: error.message });
    }
};

// POST: Create a new item
exports.create<%= _.capitalize(_.camelCase(tableName)) %> = async (req, res) => {
    try {
        const newData = new Model(req.body);
        const savedData = await newData.save();
        res.status(201).json(savedData);
    } catch (error) {
        console.error("Error in create:", error);
        if (error.name === 'ValidationError') {
            // Send detailed validation errors to client
            const errors = Object.fromEntries(
                Object.entries(error.errors).map(([k, v]) => [k, v.message])
            );
            return res.status(400).json({ message: 'Validation failed', errors });
        }
        res.status(400).json({ message: "Failed to create data.", error: error.message });
    }
};

// PUT: Update an item by ID
exports.update<%= _.capitalize(_.camelCase(tableName)) %> = async (req, res) => {
    try {
        const updatedData = await Model.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true, runValidators: true }
        );
        if (!updatedData) {
            return res.status(404).json({ message: '<%= _.capitalize(_.camelCase(tableName)) %> not found' });
        }
        res.status(200).json(updatedData);
    } catch (error) {
        console.error("Error in update:", error);
        if (error.name === 'CastError') {
            return res.status(400).json({ message: 'Invalid ID format.' });
        }
        if (error.name === 'ValidationError') {
            const errors = Object.fromEntries(
                Object.entries(error.errors).map(([k, v]) => [k, v.message])
            );
            return res.status(400).json({ message: 'Validation failed', errors });
        }
        res.status(400).json({ message: "Failed to update data.", error: error.message });
    }
};

// DELETE: Delete an item by ID
exports.delete<%= _.capitalize(_.camelCase(tableName)) %> = async (req, res) => {
    try {
        const deleted = await Model.findByIdAndDelete(req.params.id);
        if (!deleted) {
            return res.status(404).json({ message: '<%= _.capitalize(_.camelCase(tableName)) %> not found' });
        }
        res.status(200).json({ message: '<%= _.capitalize(_.camelCase(tableName)) %> deleted successfully' });
    } catch (error) {
        console.error("Error in delete:", error);
        if (error.name === 'CastError') {
            return res.status(400).json({ message: 'Invalid ID format.' });
        }
        res.status(500).json({ message: "Failed to delete data.", error: error.message });
    }
};
